import React, {useEffect, useState} from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  Image,
  TouchableOpacity,
  ActivityIndicator,
} from 'react-native';
import {db} from '../../android/app/src/config/firebaseConfig';
import {collection, getDocs, doc, getDoc} from 'firebase/firestore';
import {useNavigation} from '@react-navigation/native';
import {NativeStackNavigationProp} from '@react-navigation/native-stack';
import {RootStackParamList} from '../types.ts';

type ListItem = {
  id: string;
  nombreLista: string;
  description: string;
  image?: any;
  autogenerated: boolean;
  fechaCreacion?: number;
  peliculas?: string[];
  privada?: boolean;
};

const OtherUserProfile = ({route}) => {
  const {userID} = route.params;
  console.log('me esta llegando ', userID);
  // userID = '0vsM6CtQWDg4mcW70qd7QAuMTXh1'; // fijo por ahora
  const navigation =
    useNavigation<NativeStackNavigationProp<RootStackParamList>>();

  const [listas, setListas] = useState<ListItem[]>([]);
  const [nombre, setNombre] = useState('Usuario');
  const [photoURL, setPhotoURL] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        // Obtener datos del usuario
        const userDocRef = doc(db, 'users', userID);
        const userSnap = await getDoc(userDocRef);

        if (userSnap.exists()) {
          const userData = userSnap.data();
          setNombre(userData.name || 'Usuario');
          setPhotoURL(userData.photoURL || '');
        }

        // Obtener listas del usuario
        const listasRef = collection(db, 'users', userID, 'listas');
        const querySnapshot = await getDocs(listasRef);

        const listasFormateadas = querySnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data(),
        }));

        // Filtrar solo listas públicas
        const listasPublicas = listasFormateadas.filter(
          item => item.privada !== undefined && !item.privada,
        );

        setListas(listasPublicas);

        console.log(listasPublicas);
      } catch (error) {
        console.error('Error al obtener datos:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchUserData();
  }, [userID]);

  const formatTimestamp = (
    timestamp: {seconds: number; nanoseconds: number} | number,
  ) => {
    let date;

    if (typeof timestamp === 'number') {
      // Si es un número, conviértelo directamente a una fecha
      date = new Date(timestamp);
    } else {
      // Si es un objeto { seconds, nanoseconds }, conviértelo a una fecha
      date = new Date(timestamp.seconds * 1000);
    }

    return date.toLocaleDateString(); // Formatea la fecha (puedes personalizar el formato)
  };

  const renderItem = ({item}: {item: ListItem}) => (
    <TouchableOpacity
      style={styles.item}
      onPress={() =>
        navigation.navigate('ContenidoLista', {
          nombreLista: item.nombreLista,
          descripcion: item.description,
          tiempoCreacion: item.fechaCreacion
            ? formatTimestamp(item.fechaCreacion)
            : 'Sin fecha',
          peliculas: item.peliculas,
          privada: item.privada,
        })
      }>
      <View style={styles.listaContent}>
        {item.image ? (
          <Image source={{uri: item.image}} style={styles.listaImage} />
        ) : (
          <View style={styles.placeholderImage}>
            <Text style={styles.placeholderText}>
              {item.nombreLista.charAt(0)}
            </Text>
          </View>
        )}
        <View style={styles.listaTextContainer}>
          <Text style={styles.listaNombre}>{item.nombreLista}</Text>
          <Text style={styles.listaDescripcion}>
            {item.descripcion || 'Lista personalizada'}
          </Text>
          <Text style={styles.listaPeliculas}>
            {item.peliculas?.length || 0} películas
          </Text>
        </View>
      </View>
    </TouchableOpacity>
  );

  if (loading) {
    return (
      <View style={[styles.container, styles.loadingContainer]}>
        <ActivityIndicator size="large" color="#4CC9F0" />
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {/* Header con foto y nombre */}
      <View style={styles.header}>
        {photoURL ? (
          <Image source={{uri: photoURL}} style={styles.profileImage} />
        ) : (
          <View style={styles.profilePlaceholder}>
            <Text style={styles.profilePlaceholderText}>
              {nombre.charAt(0)}
            </Text>
          </View>
        )}
        <Text style={styles.userName}>{nombre}</Text>
      </View>

      {/* Lista de listas públicas */}
      <Text style={styles.sectionTitle}>Listas públicas</Text>
      {listas.length > 0 ? (
        <FlatList
          data={listas}
          renderItem={renderItem}
          keyExtractor={item => item.id}
          contentContainerStyle={styles.listContainer}
          ItemSeparatorComponent={() => <View style={styles.separator} />}
        />
      ) : (
        <View style={styles.emptyContainer}>
          <Text style={styles.emptyText}>
            Este usuario no tiene listas públicas
          </Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#0A1B2A',
    paddingTop: 20,
  },
  loadingContainer: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  header: {
    alignItems: 'center',
    paddingVertical: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#1E3A5F',
    marginBottom: 10,
  },
  profileImage: {
    width: 100,
    height: 100,
    borderRadius: 50,
    marginBottom: 10,
  },
  profilePlaceholder: {
    width: 100,
    height: 100,
    borderRadius: 50,
    backgroundColor: '#124559',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 10,
  },
  profilePlaceholderText: {
    color: '#FFFFFF',
    fontSize: 40,
    fontWeight: 'bold',
  },
  userName: {
    color: '#FFFFFF',
    fontSize: 22,
    fontWeight: 'bold',
  },
  sectionTitle: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: 'bold',
    marginHorizontal: 16,
    marginVertical: 10,
  },
  listContainer: {
    paddingHorizontal: 16,
  },
  listaItem: {
    paddingVertical: 12,
  },
  listaContent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  listaImage: {
    width: 60,
    height: 80,
    borderRadius: 5,
    marginRight: 12,
  },
  placeholderImage: {
    width: 60,
    height: 80,
    borderRadius: 5,
    backgroundColor: '#124559',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  placeholderText: {
    color: '#FFFFFF',
    fontSize: 24,
    fontWeight: 'bold',
  },
  listaTextContainer: {
    flex: 1,
  },
  listaNombre: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  listaDescripcion: {
    color: '#A1A1A1',
    fontSize: 14,
    marginBottom: 4,
  },
  listaPeliculas: {
    color: '#4CC9F0',
    fontSize: 12,
  },
  separator: {
    height: 1,
    backgroundColor: '#1E3A5F',
    marginVertical: 5,
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  emptyText: {
    color: '#A1A1A1',
    fontSize: 16,
    textAlign: 'center',
  },
});

export default OtherUserProfile;
