import React, {useEffect, useState} from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
} from 'react-native';
import {NativeStackNavigationProp} from '@react-navigation/native-stack';
import {useNavigation} from '@react-navigation/native';
import {RootStackParamList} from '../types.ts';
import {collection, onSnapshot} from 'firebase/firestore';
import {db} from '../../android/app/src/config/firebaseConfig';
import masTardeImg from '../assets/masTarde.png';
import meGustaImg from '../assets/meGusta.png';
import yaVistasImg from '../assets/yaVistas.png';
import {ListItemComponent} from '../components/ListItemComponent.tsx';
import {useAuthStore} from '../store/useAuthStore';

// Components
import NavBar from '../components/NavBar';

type ListItem = {
  id: string;
  title: string;
  description: string;
  image?: any;
  autogenerated: boolean;
  fechaCreacion?: number;
  peliculas?: string[];
  privada?: boolean;
};

const MisListasScreen = () => {
  const user = useAuthStore(state => state.user);
  const navigation =
    useNavigation<NativeStackNavigationProp<RootStackParamList>>();
  const [firebaseLists, setFirebaseLists] = useState<ListItem[]>([]);

  const staticLists: ListItem[] = [
    {
      id: '1',
      title: 'Ver más tarde',
      description: 'Lista autogenerada',
      autogenerated: true,
      image: masTardeImg,
    },
    {
      id: '2',
      title: 'Favoritos',
      description: 'Lista autogenerada',
      autogenerated: true,
      image: meGustaImg,
    },
    {
      id: '3',
      title: 'vistos',
      description: 'Lista autogenerada',
      autogenerated: true,
      image: yaVistasImg,
    },
  ];

  useEffect(() => {
    if (!user) return;
    const unsubscribe = onSnapshot(
      collection(db, 'users', user.uid, 'listas'),
      snapshot => {
        const fetchedLists: ListItem[] = snapshot.docs.map(doc => {
          const data = doc.data();
          // Asigna la imagen personalizada según el nombre de la lista
          let image;
          if (data.nombreLista === 'Ver más tarde') image = masTardeImg;
          if (data.nombreLista === 'Favoritos') image = meGustaImg;
          if (data.nombreLista === 'vistos') image = yaVistasImg;

          return {
            id: doc.id,
            title: data.nombreLista,
            description:
              data.descripcion && data.descripcion.trim() !== ''
                ? data.descripcion
                : 'Lista personalizada',
            image: image, // <-- aquí usas la imagen personalizada
            autogenerated: false,
            peliculas: data.peliculas || [],
            fechaCreacion: data.fechaCreacion || 0,
            privada: data.privada ?? false,
          };
        });

        // Solo agrega las estáticas que NO están en Firestore
        const firestoreTitles = fetchedLists.map(list => list.title);
        const staticListsToShow = staticLists.filter(
          staticList => !firestoreTitles.includes(staticList.title),
        );

        // Solo las listas dinámicas (no estáticas)
        const dynamicLists = fetchedLists.filter(
          list => !staticLists.some(staticList => staticList.title === list.title)
        );

        // Ordena las dinámicas por fechaCreacion descendente
        dynamicLists.sort((a, b) => (b.fechaCreacion || 0) - (a.fechaCreacion || 0));

        // Combina: primero las estáticas que faltan, luego las de Firestore (autogeneradas y dinámicas)
        const combinedLists = [
          ...staticListsToShow,
          ...fetchedLists.filter(list =>
            staticLists.some(staticList => staticList.title === list.title)
          ),
          ...dynamicLists,
        ];

        setFirebaseLists(combinedLists);
      },
    );

    return unsubscribe;
  }, [user]);

  const renderItem = ({item}: {item: ListItem}) => (
    <ListItemComponent item={item} navigation={navigation} />
  );

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Mis listas</Text>
        <TouchableOpacity
          onPress={() => navigation.navigate('NuevaLista')}
          style={styles.addButton}>
          <Text style={styles.addButtonText}>＋</Text>
        </TouchableOpacity>
      </View>

      <FlatList
        data={firebaseLists}
        keyExtractor={item => item.id}
        renderItem={renderItem}
        ItemSeparatorComponent={() => <View style={styles.separator} />}
        contentContainerStyle={{paddingBottom: 80}} // espacio para la NavBar
      />

      <NavBar />
    </View>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#01161E',
    paddingHorizontal: 16,
    paddingTop: 16,
  }, 
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 16,
    position: 'relative',
  },
  headerTitle: {
    color: '#FFFFFF',
    fontSize: 20,
    fontWeight: 'bold',
  },
  addButton: {
    position: 'absolute',
    right: 0,
  },
  addButtonText: {
    color: '#FFFFFF',
    fontSize: 26,
    fontWeight: 'bold',
  },
  item: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
  },
  image: {
    width: 50,
    height: 75,
    marginRight: 12,
    borderRadius: 4,
  },
  placeholderImage: {
    width: 50,
    height: 75,
    marginRight: 12,
    borderRadius: 4,
    backgroundColor: '#124559',
    alignItems: 'center',
    justifyContent: 'center',
  },
  placeholderText: {
    color: '#FFFFFF',
    fontSize: 20,
    fontWeight: 'bold',
  },
  textContainer: {
    flex: 1,
  },
  title: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
  description: {
    color: '#A1A1A1',
    fontSize: 14,
  },
  separator: {
    height: 1,
    backgroundColor: '#124559',
  },
});

export default MisListasScreen;
