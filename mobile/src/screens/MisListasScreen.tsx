import React, {useEffect, useState} from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  Image,
  TouchableOpacity,
} from 'react-native';
import {NativeStackNavigationProp} from '@react-navigation/native-stack';
import {useNavigation} from '@react-navigation/native';
import {RootStackParamList} from '../types.ts';
import {collection, onSnapshot} from 'firebase/firestore';
import {db} from '../../android/app/src/config/firebaseConfig';
import {getDocs} from 'firebase/firestore';
import masTardeImg from '../assets/masTarde.png';
import meGustaImg from '../assets/meGusta.png';
import yaVistasImg from '../assets/yaVistas.png';
import {ListItemComponent} from '../components/ListItemComponent.tsx';
import {useAuthStore} from '../store/useAuthStore';

// Components
import NavBar from '../components/NavBar';
import {parse} from 'react-native-svg';

type ListItem = {
  id: string;
  title: string;
  description: string;
  image?: any;
  autogenerated: boolean;
  fechaCreacion?: number;
  peliculas?: string[];
};

const MisListasScreen = () => {
  const user = useAuthStore(state => state.user);
  const navigation =
    useNavigation<NativeStackNavigationProp<RootStackParamList>>();
  const [firebaseLists, setFirebaseLists] = useState<ListItem[]>([]);

  const staticLists: ListItem[] = [
    {
      id: '1',
      title: 'Ver más tarde',
      description: 'Lista autogenerada',
      autogenerated: true,
      image: masTardeImg,
    },
    {
      id: '2',
      title: 'Favoritos',
      description: 'Lista autogenerada',
      autogenerated: true,
      image: meGustaImg,
    },
    {
      id: '3',
      title: 'Películas ya vistas',
      description: 'Lista autogenerada',
      autogenerated: true,
      image: yaVistasImg,
    },
  ];

  useEffect(() => {
    const unsubscribe = onSnapshot(
      collection(db, 'users', user.uid, 'listas'),
      snapshot => {
        const fetchedLists: ListItem[] = snapshot.docs.map(doc => {
          const data = doc.data();
          return {
            id: doc.id,
            title: data.nombreLista,
            description:
              data.descripcion && data.descripcion.trim() !== ''
                ? data.descripcion
                : 'Lista personalizada',
            image: data.image || undefined,
            autogenerated: false,
            peliculas: data.peliculas || [],
            fechaCreacion: data.fechaCreacion || 0,
          };
        });

        let sortedLists = fetchedLists.sort(
          (a, b) => b.fechaCreacion! - a.fechaCreacion!,
        );

        console.log(sortedLists);

        sortedLists = sortedLists.filter(element => {
          if (element.id == 'me_gusta') return false;
          if (element.id == 'vistos') return false;
          if (element.id == 'ver_mas_tarde') return false;
          return true;
        });
        setFirebaseLists(sortedLists);
      },
    );

    return unsubscribe;
  }, []);

  const allLists = [...staticLists, ...firebaseLists];

  const truncateDescription = (text: string) => {
    return text.length > 60 ? text.slice(0, 60) + '...' : text;
  };

  const formatTimestamp = (
    timestamp: {seconds: number; nanoseconds: number} | number,
  ) => {
    let date;

    if (typeof timestamp === 'number') {
      // Si es un número, conviértelo directamente a una fecha
      date = new Date(timestamp);
    } else {
      // Si es un objeto { seconds, nanoseconds }, conviértelo a una fecha
      date = new Date(timestamp.seconds * 1000);
    }

    return date.toLocaleDateString(); // Formatea la fecha (puedes personalizar el formato)
  };

  const renderItem = ({item}: {item: ListItem}) => (
    <TouchableOpacity
      style={styles.item}
      onPress={async () => {
        try {
          let currentTitle = item.title;

          if (item.title == 'Favoritos') {
            currentTitle = 'me_gusta';
          }
          if (item.title == 'Ver más tarde') {
            currentTitle = 'ver_mas_tarde';
          }
          if (item.title == 'Películas ya vistas') {
            currentTitle = 'vistos';
          }

          const snapshot = await getDocs(
            collection(
              db,
              'users',
              user.uid,
              'listas',
              currentTitle,
              'peliculas',
            ),
          );

          const peliculas = snapshot.docs
            .map(doc => {
              const data = doc.data();
              // Intentamos encontrar cualquier campo con un ID numérico válido
              const id = data.movieId ?? data.id;
              return typeof id === 'string' ? parseInt(id) : id;
            })
            .filter(id => typeof id === 'number' && !isNaN(id));

          navigation.navigate('ContenidoLista', {
            nombreLista: item.title,
            descripcion: item.description ?? 'Lista autogenerada',
            tiempoCreacion: item.fechaCreacion
              ? formatTimestamp(item.fechaCreacion)
              : 'Sin fecha',
            peliculas: peliculas,
          });
        } catch (error) {
          console.error('Error al obtener películas de la lista:', error);
        }
      }}>
      {item.image ? (
        <Image
          source={item.autogenerated ? item.image : {uri: item.image}}
          style={styles.image}
        />
      ) : (
        <View style={styles.placeholderImage}>
          <Text style={styles.placeholderText}>
            {item.title ? item.title.charAt(0) : '#'}
          </Text>
        </View>
      )}
      <View style={styles.textContainer}>
        <Text style={styles.title}>{item.title}</Text>
        <Text style={styles.description}>
          {truncateDescription(item.description)}
        </Text>
      </View>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Mis listas</Text>
        <TouchableOpacity
          onPress={() => navigation.navigate('NuevaLista')}
          style={styles.addButton}>
          <Text style={styles.addButtonText}>＋</Text>
        </TouchableOpacity>
      </View>

      <FlatList
        data={allLists}
        keyExtractor={item => item.id}
        renderItem={renderItem}
        ItemSeparatorComponent={() => <View style={styles.separator} />}
        contentContainerStyle={{paddingBottom: 80}} // espacio para la NavBar
      />

      <NavBar />
    </View>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#01161E',
    paddingHorizontal: 16,
    paddingTop: 16,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 16,
    position: 'relative',
  },
  headerTitle: {
    color: '#FFFFFF',
    fontSize: 20,
    fontWeight: 'bold',
  },
  addButton: {
    position: 'absolute',
    right: 0,
  },
  addButtonText: {
    color: '#FFFFFF',
    fontSize: 26,
    fontWeight: 'bold',
  },
  item: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
  },
  image: {
    width: 50,
    height: 75,
    marginRight: 12,
    borderRadius: 4,
  },
  placeholderImage: {
    width: 50,
    height: 75,
    marginRight: 12,
    borderRadius: 4,
    backgroundColor: '#124559',
    alignItems: 'center',
    justifyContent: 'center',
  },
  placeholderText: {
    color: '#FFFFFF',
    fontSize: 20,
    fontWeight: 'bold',
  },
  textContainer: {
    flex: 1,
  },
  title: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
  description: {
    color: '#A1A1A1',
    fontSize: 14,
  },
  separator: {
    height: 1,
    backgroundColor: '#124559',
  },
});

export default MisListasScreen;
